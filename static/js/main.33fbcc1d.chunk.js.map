{"version":3,"sources":["modal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Modal","setModalOpen","isModalOpen","modal","useRef","onClickOutsideHandler","e","current","contains","target","classList","window","removeEventListener","useEffect","addEventListener","className","ref","start","steps","App","useState","numberValue","setNumberValue","randomNumber","setrandomNumber","showLog","setLog","next","setNext","shuffle","o","j","x","i","length","Math","floor","random","Date","now","k","s","n","compare","toString","slice","console","log","alert","split","includes","end","Number","round","toFixed","id","onSubmit","preventDefault","form","document","getElementById","reset","type","pattern","onKeyPress","key","onChange","value","onClick","join","substring","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.33fbcc1d.chunk.js","sourcesContent":["import React, { useRef, useEffect, FC } from \"react\";\n\ninterface Props {\n  setModalOpen: any;\n  isModalOpen: boolean;\n}\n\nexport const Modal: FC<Props> = ({ setModalOpen, isModalOpen }) => {\n  const modal = useRef<HTMLDivElement>(null);\n  const onClickOutsideHandler = (e: any) => {\n    if (\n      (isModalOpen && !modal.current!.contains(e.target)) ||\n      (isModalOpen && e.target.classList.contains(\"exit-modal-button\"))\n    ) {\n      setModalOpen(false);\n      window.removeEventListener(\"click\", onClickOutsideHandler);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"click\", onClickOutsideHandler);\n  }, [setModalOpen, isModalOpen, modal]);\n\n  if (isModalOpen) {\n    return (\n      <div className=\"modal\">\n        <div ref={modal} className=\"modal-container\">\n          короче, нажимаете gen, генерируется случайное число, надо угадать по подсказкам в консоли, вот и все. точные\n          попадания - точно попал по месту цифры, просто попадания - ну просто попал. начинаться может с нуля, цифры\n          повторяться не могут.<br></br> ¯\\_(ツ)_/¯\n        </div>\n        {/* <button onClick={() => setModalOpen(!isModalOpen)} className=\"exit-modal-button\">\n          ×\n        </button> */}\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n","import React, { useState } from \"react\";\nimport { Modal } from \"./modal\";\nimport \"./App.scss\";\n\nlet start = 0;\nlet steps = 0;\nexport const App = () => {\n  const [numberValue, setNumberValue] = useState<number>();\n  const [randomNumber, setrandomNumber] = useState<number>();\n  const [isModalOpen, setModalOpen] = useState<boolean>(false);\n  const [showLog, setLog] = useState<boolean>(false);\n  const [next, setNext] = useState<boolean>(false);\n\n  const startfunc = () => {\n    return (start = Date.now());\n  };\n  function shuffle(o: any) {\n    for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);\n    steps = 0;\n    startfunc();\n    return o;\n  }\n  let i = 0;\n  let k = 0;\n  let e = 0;\n  let s = 0;\n  let n = 0;\n  const compare = () => {\n    for (; n < 4; n++) {\n      if (numberValue?.toString().slice()[n] === numberValue?.toString().slice()[n + 1]) {\n        console.log(\n          \"напишите правильно. ваше число `\" + numberValue?.toString().slice()[n] + \"` используется несколько раз.\"\n        );\n        alert(\"write a correct number\");\n        return;\n      }\n    }\n\n    for (; i < 4; i++) {\n      if (randomNumber?.toString().slice()[i] === numberValue?.toString().slice()[i]) {\n        k++;\n      }\n    }\n    console.log(\"точных совпадений:\", k);\n    steps++;\n    for (; s < 4; s++) {\n      if (randomNumber?.toString().split(\"\").includes(numberValue!.toString().split(\"\")[s])) e++;\n    }\n\n    let end = Date.now();\n\n    console.log(\"совпадений:\", e - k);\n    Number(randomNumber) === Number(numberValue) &&\n      console.log(\n        \"you win, вы потратили \",\n        Math.round((end - start) / 1000) > 60 ? ((end - start) / 60000).toFixed(2) : Math.round((end - start) / 1000),\n        Math.round((end - start) / 1000) > 60 ? \"минуты и сделали\" : \"секунд и сделали\",\n        steps,\n        \"шагов\"\n      );\n  };\n\n  // console.log(randomNumber);\n  const reset = () => {\n    const form = document.getElementById(\"form\") as HTMLFormElement;\n\n    if (form !== null) {\n      form.reset();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"div2\">\n        <div className=\"interface\">\n          <form\n            id=\"form\"\n            onSubmit={(e: any) => {\n              e.preventDefault();\n              compare();\n              reset();\n            }}\n          >\n            <input\n              type=\"text\"\n              pattern=\"[0-9]{4}\"\n              onKeyPress={(e) => e.key === \"Enter\" && console.log(numberValue)}\n              onChange={(e: any) => setNumberValue(Number(e.target.value))}\n            />\n          </form>\n          <button\n            onClick={() => {\n              setrandomNumber(shuffle(\"0123456789\".split(\"\")).join(\"\").substring(0, 4));\n            }}\n          >\n            gen\n          </button>\n        </div>\n        <button className=\"changelog-btn\" onClick={() => setLog(!showLog)}>\n          changelog\n        </button>\n        {showLog && (\n          <div className=\"changeLog\">\n            изменения в общем такие. хорошие. <button onClick={() => setNext(!next)}>далее →</button>\n            {next && (\n              <ul>\n                <li>у нас тут в общем капитальный редизайн;</li>\n                <li>модалка теперь закрывается по вне (украденная разработка Илона Васильевича Маска);</li>\n                <li>полная адаптация под мобильные устройства(да вообще под все устройства);</li>\n                <li>\n                  пользователи, которые любят проблемы, теперь не смогут отправлять одинаковые числа. <br />\n                  система не примет, даже если постараться;\n                </li>\n                <li>а еще, если нажать снова на changelog, то закроется вся ветка сразу;</li>\n                <li>много мелких доработок (честно).</li>\n              </ul>\n            )}\n          </div>\n        )}\n        <button className=\"modalButton\" onClick={() => setModalOpen(!isModalOpen)}>\n          ?\n        </button>\n        {isModalOpen && <Modal setModalOpen={setModalOpen} isModalOpen={isModalOpen} />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["modal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Modal","setModalOpen","isModalOpen","console","log","modal","useRef","className","ref","onClick","start","steps","App","useState","numberValue","setNumberValue","randomNumber","setrandomNumber","shuffle","o","j","x","i","length","Math","floor","random","Date","now","k","e","s","compare","toString","slice","split","includes","end","Number","round","toFixed","id","onSubmit","preventDefault","form","document","getElementById","reset","type","pattern","onKeyPress","key","onChange","target","value","join","substring","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.35f46859.chunk.js","sourcesContent":["import React, { useRef, FC } from \"react\";\n\ninterface Props {\n  setModalOpen: any;\n  isModalOpen: boolean;\n}\nexport const Modal: FC<Props> = ({ setModalOpen, isModalOpen }) => {\n    console.log('isModalOpen', isModalOpen)\n  const modal = useRef(null);\n  //   const onClickOutsideHandler = (e: any) => {\n  //     if (\n  //       (isModalOpen && !modal.contains(e.target)) ||\n  //       (isModalOpen && e.target.classList.contains(\"exit-modal-button\"))\n  //     ) {\n  //       setModalOpen(false);\n  //       window.removeEventListener(\"click\", onClickOutsideHandler);\n  //     }\n  //   };\n\n  //   useEffect(() => {\n  //     window.addEventListener(\"click\", onClickOutsideHandler);\n  //   }, [setModalOpen, isModalOpen, modal]);\n  if (isModalOpen) {\n    return (\n      <div className=\"modal\">\n        <div ref={modal} className=\"modal-container\">\n          короче, нажимаете gen, генерируется случайное число, надо угадать по подсказкам в консоли, вот и все. точные попадания - точно попал по месту цифры, просто попадания - ну просто попал.\n        </div>\n        <button onClick={() => setModalOpen(!isModalOpen)} className=\"exit-modal-button\">\n          ×\n        </button>\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n","import React, { useState } from \"react\";\nimport { Modal } from \"./modal\";\nimport \"./App.scss\";\n\nlet start = 0;\nlet steps = 0;\nexport const App = () => {\n  const [numberValue, setNumberValue] = useState<number>();\n  const [randomNumber, setrandomNumber] = useState<number>();\n  const [isModalOpen, setModalOpen] = useState<boolean>(false);\n\n  const startfunc = () => {\n    return (start = Date.now());\n  };\n  function shuffle(o: any) {\n    for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);\n    startfunc();\n    return o;\n  }\n  let i = 0;\n  let k = 0;\n  let e = 0;\n  let s = 0;\n\n  const compare = () => {\n    for (; i < 4; i++) {\n      if (randomNumber?.toString().slice()[i] === numberValue?.toString().slice()[i]) {\n        k++;\n      }\n    }\n    console.log(\"точных совпадений:\", k);\n    steps++;\n    for (; s < 4; s++) {\n      if (randomNumber?.toString().split(\"\").includes(numberValue!.toString().split(\"\")[s])) e++;\n    }\n\n    let end = Date.now();\n\n    console.log(\"совпадений:\", e - k);\n    Number(randomNumber) === Number(numberValue) &&\n      console.log(\n        \"you win, вы потратили \",\n        Math.round((end - start) / 1000) > 60 ? ((end - start) / 60000).toFixed(2) : Math.round((end - start) / 1000),\n        Math.round((end - start) / 1000) > 60 ? \"минуты и сделали\" : \"секунд и сделали\",\n        steps,\n        \"шагов\"\n      );\n  };\n\n  // console.log(randomNumber);\n  const reset = () => {\n    const form = document.getElementById(\"form\") as HTMLFormElement;\n\n    if (form !== null) {\n      form.reset();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"div2\">\n        <form\n          id=\"form\"\n          onSubmit={(e: any) => {\n            e.preventDefault();\n            compare();\n            reset();\n          }}\n        >\n          <input\n            type=\"text\"\n            pattern=\"[0-9]{4}\"\n            onKeyPress={(e) => e.key === \"Enter\" && console.log(numberValue)}\n            onChange={(e: any) => setNumberValue(Number(e.target.value))}\n          />\n        </form>\n        <button\n          onClick={() => {\n            setrandomNumber(shuffle(\"0123456789\".split(\"\")).join(\"\").substring(0, 4));\n          }}\n        >\n          gen\n        </button>\n        <button className=\"modalButton\" onClick={() => setModalOpen(!isModalOpen)}>\n          ?\n        </button>\n        {isModalOpen && <Modal setModalOpen={setModalOpen} isModalOpen={isModalOpen} />}\n        {/* <span className=\"bumber\">{Number(randomNumber) === Number(numberValue) ? \"you win\" : \"you lose\"}</span> */}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}